// other mixins
@import "./colors";

@mixin bs-classes($selector, $hover: 'false') {
    #{$selector}-success {
        @include success;
    }

    #{$selector}-danger {
        @include danger;
    }

    #{$selector}-primary {
        @include primary;
    }

    #{$selector}-warning {
        @include warning;
    }

    // outlines
    #{$selector}-outline-success {
        @include outline-success;
    }

    #{$selector}-outline-danger {
        @include outline-danger;
    }

    #{$selector}-outline-primary {
        @include outline-primary;
    }

    #{$selector}-outline-secondary {
        @include outline-secondary;
    }

    #{$selector}-outline-warning {
        @include outline-warning;
    }

    @if $hover=='true' {
        #{$selector} {
            cursor    : pointer;
            transition: background-color .1s ease-in, color .1s ease-in;
        }

        #{$selector}-success:hover,
        #{$selector}-success:active {
            @include outline-success;
        }

        #{$selector}-danger:hover,
        #{$selector}-danger:active {
            @include outline-danger;
        }

        #{$selector}-primary:hover,
        #{$selector}-primary:active {
            @include outline-primary;
        }

        #{$selector}-warning:hover,
        #{$selector}-warning:active {
            @include outline-warning;
        }

        // Outlines
        #{$selector}-outline-success:hover,
        #{$selector}-outline-success:active {
            @include success;
        }

        #{$selector}-outline-danger:hover,
        #{$selector}-outline-danger:active {
            @include danger;
        }

        #{$selector}-outline-primary:hover,
        #{$selector}-outline-primary:active {
            @include primary;
        }

        #{$selector}-outline-secondary:hover,
        #{$selector}-outline-secondary:active {
            @include secondary;
        }

        #{$selector}-outline-warning:hover,
        #{$selector}-outline-warning:active {
            @include warning;
        }
    }
}

// Close Btn
@mixin closeBtn {
    font-weight: bold;
    font-size  : 30px;
    line-height: 1;
    cursor     : pointer;

}

@mixin modifyEvents {
    background-color: $gray-2;
}

//Useful for Calendar to give a same size in this function
//By giving how many columns(numbers) and margin(with %)
@mixin grid($cols, $mgn) {
    float        : left;
    margin-right : $mgn;
    margin-bottom: $mgn;
    width        : ((100% - (($cols - 1) * $mgn)) / $cols);

    &:nth-child(#{$cols}n) {
        margin-right: 0;
    }
}

// Useful for responsive sizes
// By giving respective max-width(with px) and return all the content
@mixin responsive($arg...) {
    @if length($arg)==1 {
        @media screen and (max-width: nth($arg, 1)) {
            @content;
        }
    }

    //Give the [higher value](with px), [lower value](with px), in between will return all the content
    @if(length($arg)==2) {
        @media screen and (max-width: nth($arg, 1)) and (min-width: nth($arg, 2)) {
            @content;
        }
    }
}